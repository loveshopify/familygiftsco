{"version":3,"sources":["webpack:///./src/js/vendor/shopify/variants.cjs.js","webpack:///./src/js/components/content/ProductForm.js"],"names":["Object","defineProperty","exports","value","_classCallCheck3","_interopRequireDefault","require","_createClass3","_jquery2","obj","__esModule","default","Variants","options","this","$container","product","singleOptionSelector","originalSelectorId","enableHistoryState","currentVariant","_getVariantFromOptions","on","_onSelectChange","bind","key","currentOptions","map","element","$element","type","attr","currentOption","checked","val","index","data","push","selectedValues","_getCurrentOptions","variants","found","forEach","variant","satisfied","option","trigger","_updateMasterSelect","_updateImages","_updatePrice","_updateHistoryState","variantImage","featured_image","currentVariantImage","src","price","compare_at_price","history","replaceState","currentHref","window","location","href","newUrl","test","replace","id","concat","path","serialize","delegate","selectors","ProductForm","el","ctx","identifier","dataset","init","bindEvents","updateVariantsAvailability","$el","$","parentProduct","getClosest","productForm","querySelector","variantSelector","variantSelectors","querySelectorAll","qtySelector","priceWrapper","productPrice","optionSelectorsUI","addToCart","addToCartText","featuredImage","gallery","productData","JSON","parse","text","console","log","successAction","action","settings","mapVariantsArrays","markUnavailable","error","addEventListener","addProductToCart","e","resetForm","ev","updateAddToCartState","updateGallery","updateProductPrices","optionValues","option1","available","option2","option3","each","includes","classList","add","disabled","preventDefault","addingToCart","CustomEvent","document","body","dispatchEvent","formData","axios","post","then","response","productAddedToCart","detail","emit","origin","catch","selectedVariant","optionsSize","length","productVariants","filteredOptionValues","secondFilter","filter","Set","thirdFilter","group","remove","evt","innerHTML","theme","strings","unavailable","soldOut","$comparePrice","$compareEls","formatMoney","moneyFormat","html","removeClass","addClass","variantUpdated","level2inputs","level3inputs","component","node"],"mappings":"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","file":"9.chunk.1e17ca3572b6f804af20.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\n\nvar _classCallCheck2 = require('@babel/runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('@babel/runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\n/**\n * Variant Selection scripts\n * ------------------------------------------------------------------------------\n *\n * Handles change events from the variant inputs in any `cart/add` forms that may\n * exist. Also updates the master select and triggers updates when the variants\n * price or image changes.\n *\n * @namespace variants\n */\n\nvar Variants = (function () {\n  /**\n   * Variant constructor\n   *\n   * @param {object} options - Settings from `product.js`\n   */\n\n  function Variants(options) {\n    (0, _classCallCheck3.default)(this, Variants);\n\n    this.$container = options.$container;\n    this.product = options.product;\n    this.singleOptionSelector = options.singleOptionSelector;\n    this.originalSelectorId = options.originalSelectorId;\n    this.enableHistoryState = options.enableHistoryState;\n    this.currentVariant = this._getVariantFromOptions();\n\n    (0, _jquery2.default)(this.singleOptionSelector, this.$container).on('change', this._onSelectChange.bind(this));\n  }\n\n  /**\n   * Get the currently selected options from add-to-cart form. Works with all\n   * form input elements.\n   *\n   * @return {array} options - Values of currently selected variants\n   */\n\n  (0, _createClass3.default)(Variants, [\n    {\n      key: '_getCurrentOptions',\n      value: function _getCurrentOptions() {\n        var currentOptions = [];\n\n        _jquery2.default.map((0, _jquery2.default)(this.singleOptionSelector, this.$container), function (element) {\n          var $element = (0, _jquery2.default)(element);\n          var type = $element.attr('type');\n          var currentOption = {};\n\n          if (type === 'radio' || type === 'checkbox') {\n            if ($element[0].checked) {\n              currentOption.value = $element.val();\n              currentOption.index = $element.data('index');\n\n              currentOptions.push(currentOption);\n            }\n          } else {\n            currentOption.value = $element.val();\n            currentOption.index = $element.data('index');\n\n            currentOptions.push(currentOption);\n          }\n        });\n\n        return currentOptions;\n      },\n\n      /**\n       * Find variant based on selected values.\n       *\n       * @param  {array} selectedValues - Values of variant inputs\n       * @return {object || undefined} found - Variant object from product.variants\n       */\n    },\n    {\n      key: '_getVariantFromOptions',\n      value: function _getVariantFromOptions() {\n        var selectedValues = this._getCurrentOptions();\n        var variants = this.product.variants;\n        var found = false;\n\n        variants.forEach(function (variant) {\n          var satisfied = true;\n\n          selectedValues.forEach(function (option) {\n            if (satisfied) {\n              satisfied = option.value === variant[option.index];\n            }\n          });\n\n          if (satisfied) {\n            found = variant;\n          }\n        });\n\n        return found || null;\n      },\n\n      /**\n       * Event handler for when a variant input changes.\n       */\n    },\n    {\n      key: '_onSelectChange',\n      value: function _onSelectChange() {\n        var variant = this._getVariantFromOptions();\n\n        this.$container.trigger({\n          type: 'variantChange',\n          variant: variant,\n        });\n\n        if (!variant) {\n          return;\n        }\n\n        this._updateMasterSelect(variant);\n        this._updateImages(variant);\n        this._updatePrice(variant);\n        this.currentVariant = variant;\n\n        if (this.enableHistoryState) {\n          this._updateHistoryState(variant);\n        }\n      },\n\n      /**\n       * Trigger event when variant image changes\n       *\n       * @param  {object} variant - Currently selected variant\n       * @return {event}  variantImageChange\n       */\n    },\n    {\n      key: '_updateImages',\n      value: function _updateImages(variant) {\n        var variantImage = variant.featured_image || {};\n        var currentVariantImage = this.currentVariant.featured_image || {};\n\n        if (!variant.featured_image || variantImage.src === currentVariantImage.src) {\n          return;\n        }\n\n        this.$container.trigger({\n          type: 'variantImageChange',\n          variant: variant,\n        });\n      },\n\n      /**\n       * Trigger event when variant price changes.\n       *\n       * @param  {object} variant - Currently selected variant\n       * @return {event} variantPriceChange\n       */\n    },\n    {\n      key: '_updatePrice',\n      value: function _updatePrice(variant) {\n        if (variant.price === this.currentVariant.price && variant.compare_at_price === this.currentVariant.compare_at_price) {\n          return;\n        }\n\n        this.$container.trigger({\n          type: 'variantPriceChange',\n          variant: variant,\n        });\n      },\n\n      /**\n       * Update history state for product deeplinking while still retaining the query\n       * params.\n       *\n       * @param {object} variant - Currently selected variant\n       */\n    },\n    {\n      key: '_updateHistoryState',\n      value: function _updateHistoryState(variant) {\n        if (!history.replaceState || !variant) {\n          return;\n        }\n\n        var currentHref = window.location.href;\n        var newUrl = '';\n\n        if (/variant=/.test(currentHref)) {\n          newUrl = currentHref.replace(/(variant=)[^\\&]+/, '$1' + variant.id);\n        } else {\n          newUrl = currentHref.concat('?variant=').concat(variant.id);\n        }\n\n        window.history.replaceState({ path: newUrl }, '', newUrl);\n      },\n\n      /**\n       * Update hidden master select of variant change\n       *\n       * @param {object} variant - Currently selected variant\n       */\n    },\n    {\n      key: '_updateMasterSelect',\n      value: function _updateMasterSelect(variant) {\n        (0, _jquery2.default)(this.originalSelectorId, this.$container)[0].value = variant.id;\n      },\n    },\n  ]);\n  return Variants;\n})();\n\nexports.default = Variants;\n","import { component } from 'picoapp';\nimport { each } from 'lodash-es';\nimport Variants from '../../vendor/shopify/variants.cjs';\nimport { getClosest, serialize } from '../../utilities';\nimport axios from 'axios';\n\nwindow.serialize = serialize;\n\nconst delegate = require('delegate');\n\nconst selectors = {\n  addToCart: '[data-add-to-cart]',\n  addToCartText: '[data-add-to-cart-text]',\n  comparePrice: '[data-compare-price]',\n  comparePriceText: '[data-compare-text]',\n  originalSelector: '[product-variant-selector]',\n  qtyInputSelector: '.qty-input input',\n  priceWrapper: '[data-price-wrapper]',\n  productFeaturedImage: '[data-product-featured-image]',\n  productJson: '[data-product-json]',\n  productPrice: '[data-product-price]',\n  productForm: '.Product__form',\n  productThumbs: '[data-product-single-thumbnail]',\n  variantSelectorsUI: '[data-product-variant-selector-ui]',\n  singleOptionSelector: '[data-single-option-selector]',\n};\n\nclass ProductForm {\n  constructor(el, ctx) {\n    this.ctx = ctx;\n    this.identifier = el.dataset.identifier;\n    // this.toggleService = interpret(productFormMachine).start();\n    this.init(el);\n    this.bindEvents();\n    this.updateVariantsAvailability = this.updateVariantsAvailability.bind(this);\n    // this.state = productFormMachine;\n    // console.log('HELLO product form');\n  }\n\n  init(el) {\n    // this.toggleService.subscribe((state) => {\n    //   console.log(state.value);\n    // });\n    // this.toggleService.send('SUBMIT');\n\n    // Cache DOM queries\n    this.el = el;\n    this.$el = $(el);\n\n    const parentProduct = getClosest(el, '.Product');\n\n    if (!parentProduct) {\n      console.error('No product container');\n      return;\n    }\n    this.productForm = parentProduct.querySelector(selectors.productForm);\n    this.variantSelector = el.querySelector(selectors.originalSelector);\n    this.variantSelectors = el.querySelectorAll('.Product__variantSelector');\n    this.qtySelector = el.querySelector(selectors.qtyInputSelector);\n    this.priceWrapper = el.querySelector(selectors.priceWrapper);\n    this.productPrice = el.querySelector(selectors.productPrice);\n    this.optionSelectorsUI = this.productForm.querySelectorAll(selectors.variantSelectorsUI);\n    this.addToCart = el.querySelector(selectors.addToCart);\n    this.addToCartText = el.querySelector(selectors.addToCartText);\n    this.featuredImage = el.querySelector(selectors.productFeaturedImage);\n    this.gallery = el.querySelector('.Product__gallery');\n\n    // Get Product Data\n    this.productData = JSON.parse(parentProduct.querySelector(selectors.productJson).text);\n    console.log(this.productData);\n\n    this.currentVariant = this.variantSelector.value;\n\n    // Determines what add to do after successfully add the product to cart\n    this.successAction = this.addToCart.dataset.action;\n\n    const options = {\n      $container: $(parentProduct),\n      enableHistoryState: el.dataset.enableHistoryState || false,\n      singleOptionSelector: selectors.singleOptionSelector,\n      originalSelectorId: selectors.originalSelector,\n      product: this.productData,\n    };\n    this.settings = {};\n    this.variants = new Variants(options);\n\n    this.mapVariantsArrays();\n    // this.updateVariantsAvailability(this.variants.currentVariant);\n    this.markUnavailable();\n  }\n\n  bindEvents() {\n    this.el.addEventListener('submit', this.addProductToCart.bind(this));\n\n    // when changing the first option, reset the following\n    delegate(\n      this.productForm,\n      '.Product__variantSelector[data-option-index=\"1\"] input',\n      'change',\n      (e) => {\n        this.resetForm();\n      },\n      false\n    );\n\n    // When variant is changed\n    this.el.addEventListener('variantChange', (ev) => {\n      // this.updateVariantsAvailability(ev.variant);\n      this.updateAddToCartState(ev);\n      this.updateGallery(ev);\n    });\n\n    // When variant is changed\n    this.el.addEventListener('variantPriceChange', (ev) => {\n      this.updateProductPrices(ev);\n    });\n  }\n\n  mapVariantsArrays() {\n    const optionValues = [[], [], []];\n    this.variants.product.variants.map((el) => {\n      if (el.option1 && el.available) {\n        optionValues[0].push(el.option1);\n      }\n    });\n    this.variants.product.variants.map((el) => {\n      if (el.option2 && el.available) {\n        optionValues[1].push(el.option2);\n      }\n    });\n    this.variants.product.variants.map((el) => {\n      if (el.option3 && el.available) {\n        optionValues[2].push(el.option3);\n      }\n    });\n    this.optionValues = optionValues;\n    console.log(optionValues);\n  }\n\n  /**\n   * Mark the options that are totally soldout and unavailable on all variants\n   */\n  markUnavailable() {\n    each(this.variantSelectors, (el, index) => {\n      const options = el.querySelectorAll('.option');\n      each(options, (el) => {\n        if (!this.optionValues[index].includes(el.dataset.value)) {\n          el.classList.add('sold-out');\n          el.querySelector('input').disabled = true;\n        }\n      });\n    });\n  }\n\n  addProductToCart(ev) {\n    ev.preventDefault();\n\n    const addingToCart = new CustomEvent('cart.productAdding');\n    document.body.dispatchEvent(addingToCart);\n    // console.log('Dispatch cart.productAdding event');\n\n    const formData = serialize(this.el);\n\n    axios\n      .post('/cart/add.js', formData)\n      .then((response) => {\n        const productAddedToCart = new CustomEvent('cart.productAdded', {\n          detail: response.data,\n        });\n        document.body.dispatchEvent(productAddedToCart);\n        this.ctx.emit('cart.productAdded');\n        // Redirect to checkout depending on element dataset properties\n        if (this.successAction && this.successAction == 'redirect') {\n          window.location.replace(window.location.origin + '/checkout');\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  updateVariantsAvailability(selectedVariant) {\n    if (!selectedVariant) {\n      // reset unavailables\n      const selectors = document.querySelectorAll('.Product__variantSelector .is-unavailable');\n      each(selectors, (el) => {\n        el.classList.remove('is-unavailable');\n      });\n      return;\n    }\n\n    let optionsSize = this.productData.options.length;\n    let productVariants = this.variants.product.variants;\n    let filteredOptionValues = [];\n\n    if (optionsSize > 1) {\n      let secondFilter = productVariants\n        .filter((variant) => {\n          return variant.option1 == selectedVariant.option1 && variant.available;\n        })\n        .map((variant) => {\n          return variant.option2;\n        });\n      filteredOptionValues.push([...new Set(secondFilter)]);\n    }\n\n    if (optionsSize > 2) {\n      let thirdFilter = productVariants\n        .filter((variant) => {\n          return variant.option1 == selectedVariant.option1 && variant.option2 == selectedVariant.option2 && variant.available;\n        })\n        .map((variant) => {\n          return variant.option3;\n        });\n      filteredOptionValues.push([...new Set(thirdFilter)]);\n    }\n\n    /**\n     * Exclude the first selector DOM element\n     * from the list we will be updating\n     */\n    const [firstOption, ...optionsToUpdate] = this.optionSelectorsUI;\n\n    /**\n     * Loop through available options array, and update the UI\n     * to match the available options\n     */\n    optionsToUpdate.forEach((group, index) => {\n      let variantGroupOptions = group.querySelectorAll('.option');\n      variantGroupOptions.forEach((element) => {\n        if (filteredOptionValues[index].includes(element.dataset.value)) {\n          element.classList.remove('is-unavailable');\n        } else {\n          element.classList.add('is-unavailable');\n        }\n      });\n    });\n  }\n\n  /**\n   * Updates the DOM state of the add to cart button\n   *\n   * @param {boolean} enabled - Decides whether cart is enabled or disabled\n   * @param {string} text - Updates the text notification content of the cart\n   */\n  updateAddToCartState(evt) {\n    const variant = evt.variant;\n    if (variant) {\n      this.currentVariant = variant.id;\n      this.priceWrapper.classList.remove('hide');\n    } else {\n      this.addToCart.disabled = true;\n      this.addToCartText.innerHTML = theme.strings.unavailable;\n      this.priceWrapper.classList.add('hide');\n      return;\n    }\n\n    if (variant.available) {\n      this.addToCart.disabled = false;\n      this.addToCartText.innerHTML = theme.strings.addToCart;\n    } else {\n      this.addToCart.disabled = true;\n      this.addToCartText.innerHTML = theme.strings.soldOut;\n    }\n  }\n\n  /**\n   * Updates the DOM with specified prices\n   *\n   * @param {string} productPrice - The current price of the product\n   * @param {string} comparePrice - The original price of the product\n   */\n  updateProductPrices(evt) {\n    const variant = evt.variant;\n    const $comparePrice = $(selectors.comparePrice, this.$el);\n    const $compareEls = $comparePrice.add(selectors.comparePriceText, this.$container);\n\n    this.productPrice.innerHTML = formatMoney(variant.price, theme.moneyFormat);\n\n    if (variant.compare_at_price > variant.price) {\n      $comparePrice.html(formatMoney(variant.compare_at_price, theme.moneyFormat));\n      $compareEls.removeClass('hide');\n    } else {\n      $comparePrice.html('');\n      $compareEls.addClass('hide');\n    }\n  }\n\n  updateGallery(evt) {\n    const variant = evt.variant;\n    if (variant && this.gallery) {\n      const variantUpdated = new CustomEvent('variant-updated', {\n        detail: {\n          variant: variant,\n        },\n      });\n      this.gallery.dispatchEvent(variantUpdated);\n    }\n  }\n\n  resetForm() {\n    const level2inputs = this.productForm.querySelectorAll('.Product__variantSelector[data-option-index=\"2\"] input');\n    // Abort if we only have tier 1 options\n    if (!level2inputs.length) {\n      return;\n    }\n    each(level2inputs, (el) => {\n      el.checked = false;\n    });\n    const level3inputs = this.productForm.querySelectorAll('.Product__variantSelector[data-option-index=\"3\"] input');\n    each(level3inputs, (el) => {\n      el.checked = false;\n    });\n    this.addToCart.disabled = true;\n    this.addToCart.querySelector('span').innerHTML = 'Choose Options';\n  }\n}\n\nexport default component((node, ctx) => {\n  new ProductForm(node, ctx);\n});\n"],"sourceRoot":""}