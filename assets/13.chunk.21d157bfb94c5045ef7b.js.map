{"version":3,"sources":["webpack:///./node_modules/@shopify/theme-addresses/loader.js","webpack:///./node_modules/@shopify/theme-addresses/addressForm.js","webpack:///./node_modules/@shopify/theme-addresses/helpers.js","webpack:///./src/js/views/customers/Addresses.js"],"names":["SUPPORTED_LOCALES","toSupportedLocale","locale","supportedLocale","replace","toUpperCase","indexOf","substring","FIELD_REGEXP","INPUT_SELECTORS","lastName","firstName","company","address1","address2","country","zone","postalCode","city","phone","AddressForm","rootEl","options","formElements","inputSelectors","elements","Object","keys","forEach","inputKey","input","querySelector","wrapper","parentElement","labels","document","querySelectorAll","id","loadFormElements","to","index","arguments","length","nextSource","nextKey","prototype","hasOwnProperty","call","mergeObjects","elementKey","element","TypeError","validateElements","shippingCountriesOnly","Promise","resolve","fetch","location","origin","then","res","json","meta","ships_to_countries","catch","loadShippingCountries","shippingCountryCodes","method","headers","body","JSON","stringify","query","operationName","variables","countries","data","loadCountries","countrySelect","duplicatedCountrySelect","cloneNode","optionElement","createElement","value","code","textContent","name","appendChild","innerHTML","dataset","default","populateCountries","selectedCountry","addEventListener","event","handleCountryChange","target","setEventListeners","includedCountryCodes","filter","filterCountries","countryCode","getCountry","formElementName","label","setLabels","formFormat","formatting","edit","countryWrapper","afterCountry","format","split","map","fields","result","match","fieldName","newFieldName","row","line","lineCount","append","insertBefore","reorderFields","zoneEl","zones","ariaHidden","zoneSelect","duplicatedZoneSelect","populateZones","delegate","require","selectors","Addresses","el","ctx","this","init","bindEvents","addNewAddressForm","form","e","classList","toggle","getClosest","delegateTarget","countryProvinceSelector","container","countrySelector","provinceSelector","provinceWrapper","addressForm","deleteForm","build","onCountryChange","provinces","button","confirmMessage","getAttribute","window","confirm","preventDefault","component","node"],"mappings":"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","file":"13.chunk.21d157bfb94c5045ef7b.js","sourcesContent":["var query = \"query countries($locale: SupportedLocale!) {\"\n  + \"  countries(locale: $locale) {\"\n  + \"    name\"\n  + \"    code\"\n  + \"    labels {\"\n  + \"      address1\"\n  + \"      address2\"\n  + \"      city\"\n  + \"      company\"\n  + \"      country\"\n  + \"      firstName\"\n  + \"      lastName\"\n  + \"      phone\"\n  + \"      postalCode\"\n  + \"      zone\"\n  + \"    }\"\n  + \"    formatting {\"\n  + \"      edit\"\n  + \"    }\"\n  + \"    zones {\"\n  + \"      name\"\n  + \"      code\"\n  + \"    }\"\n  + \"  }\"\n  + \"}\";\n\nvar GRAPHQL_ENDPOINT = 'https://country-service.shopifycloud.com/graphql';\n\nexport function loadCountries(locale) {\n  var response = fetch(GRAPHQL_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: JSON.stringify({\n      query: query,\n      operationName: 'countries',\n      variables: {\n        locale: toSupportedLocale(locale),\n      },\n    }),\n  });\n\n  return response\n    .then(function(res) { return res.json() })\n    .then(function(countries) { return countries.data.countries });\n}\n\nvar DEFAULT_LOCALE = 'EN';\nexport var SUPPORTED_LOCALES = [\n  'DA',\n  'DE',\n  'EN',\n  'ES',\n  'FR',\n  'IT',\n  'JA',\n  'NL',\n  'PT',\n  'PT_BR',\n];\n\nexport function toSupportedLocale(locale) {\n  var supportedLocale = locale.replace(/-/, '_').toUpperCase();\n\n  if (SUPPORTED_LOCALES.indexOf(supportedLocale) !== -1) {\n    return supportedLocale;\n  } else if (SUPPORTED_LOCALES.indexOf(supportedLocale.substring(0, 2)) !== -1) {\n    return supportedLocale.substring(0, 2);\n  } else {\n    return DEFAULT_LOCALE;\n  }\n}\n","import {loadCountries} from './loader';\nimport {mergeObjects} from './helpers';\n\nvar FIELD_REGEXP = /({\\w+})/g;\nvar LINE_DELIMITER = '_';\nvar INPUT_SELECTORS = {\n  lastName: '[name=\"address[last_name]\"]',\n  firstName: '[name=\"address[first_name]\"]',\n  company: '[name=\"address[company]\"]',\n  address1: '[name=\"address[address1]\"]',\n  address2: '[name=\"address[address2]\"]',\n  country: '[name=\"address[country]\"]',\n  zone: '[name=\"address[province]\"]',\n  postalCode: '[name=\"address[zip]\"]',\n  city: '[name=\"address[city]\"]',\n  phone: '[name=\"address[phone]\"]',\n};\n\nexport default function AddressForm(rootEl, locale, options) {\n  locale = locale || 'en';\n  options = options || {inputSelectors: {}};\n  var formElements = loadFormElements(\n    rootEl,\n    mergeObjects(INPUT_SELECTORS, options.inputSelectors)\n  );\n\n  validateElements(formElements);\n\n  return loadShippingCountries(options.shippingCountriesOnly).then(function(\n    shippingCountryCodes\n  ) {\n    return loadCountries(locale).then(function(countries) {\n      init(\n        rootEl,\n        formElements,\n        filterCountries(countries, shippingCountryCodes)\n      );\n    });\n  });\n}\n\n/**\n * Runs when countries have been loaded\n */\nfunction init(rootEl, formElements, countries) {\n  populateCountries(formElements, countries);\n  var selectedCountry = formElements.country.input\n    ? formElements.country.input.value\n    : null;\n  setEventListeners(rootEl, formElements, countries);\n  handleCountryChange(rootEl, formElements, selectedCountry, countries);\n}\n\n/**\n * Handles when a country change: set labels, reorder fields, populate zones\n */\nfunction handleCountryChange(rootEl, formElements, countryCode, countries) {\n  var country = getCountry(countryCode, countries);\n\n  setLabels(formElements, country);\n  reorderFields(rootEl, formElements, country);\n  populateZones(formElements, country);\n}\n\n/**\n * Sets up event listener for country change\n */\nfunction setEventListeners(rootEl, formElements, countries) {\n  formElements.country.input.addEventListener('change', function(event) {\n    handleCountryChange(rootEl, formElements, event.target.value, countries);\n  });\n}\n\n/**\n * Reorder fields in the DOM and add data-attribute to fields given a country\n */\nfunction reorderFields(rootEl, formElements, country) {\n  var formFormat = country.formatting.edit;\n\n  var countryWrapper = formElements.country.wrapper;\n  var afterCountry = false;\n\n  getOrderedField(formFormat).forEach(function(row) {\n    row.forEach(function(line) {\n      formElements[line].wrapper.dataset.lineCount = row.length;\n      if (!formElements[line].wrapper) {\n        return;\n      }\n      if (line === 'country') {\n        afterCountry = true;\n        return;\n      }\n\n      if (afterCountry) {\n        rootEl.append(formElements[line].wrapper);\n      } else {\n        rootEl.insertBefore(formElements[line].wrapper, countryWrapper);\n      }\n    });\n  });\n}\n\n/**\n * Update labels for a given country\n */\nfunction setLabels(formElements, country) {\n  Object.keys(formElements).forEach(function(formElementName) {\n    formElements[formElementName].labels.forEach(function(label) {\n      label.textContent = country.labels[formElementName];\n    });\n  });\n}\n\n/**\n * Add right countries in the dropdown for a given country\n */\nfunction populateCountries(formElements, countries) {\n  var countrySelect = formElements.country.input;\n  var duplicatedCountrySelect = countrySelect.cloneNode(true);\n\n  countries.forEach(function(country) {\n    var optionElement = document.createElement('option');\n    optionElement.value = country.code;\n    optionElement.textContent = country.name;\n    duplicatedCountrySelect.appendChild(optionElement);\n  });\n\n  countrySelect.innerHTML = duplicatedCountrySelect.innerHTML;\n\n  if (countrySelect.dataset.default) {\n    countrySelect.value = countrySelect.dataset.default;\n  }\n}\n\n/**\n * Add right zones in the dropdown for a given country\n */\nfunction populateZones(formElements, country) {\n  var zoneEl = formElements.zone;\n  if (!zoneEl) {\n    return;\n  }\n\n  if (country.zones.length === 0) {\n    zoneEl.wrapper.dataset.ariaHidden = 'true';\n    zoneEl.input.innerHTML = '';\n    return;\n  }\n\n  zoneEl.wrapper.dataset.ariaHidden = 'false';\n\n  var zoneSelect = zoneEl.input;\n  var duplicatedZoneSelect = zoneSelect.cloneNode(true);\n  duplicatedZoneSelect.innerHTML = '';\n\n  country.zones.forEach(function(zone) {\n    var optionElement = document.createElement('option');\n    optionElement.value = zone.code;\n    optionElement.textContent = zone.name;\n    duplicatedZoneSelect.appendChild(optionElement);\n  });\n\n  zoneSelect.innerHTML = duplicatedZoneSelect.innerHTML;\n\n  if (zoneSelect.dataset.default) {\n    zoneSelect.value = zoneSelect.dataset.default;\n  }\n}\n\n/**\n * Will throw if an input or a label is missing from the wrapper\n */\nfunction validateElements(formElements) {\n  Object.keys(formElements).forEach(function(elementKey) {\n    var element = formElements[elementKey].input;\n    var labels = formElements[elementKey].labels;\n\n    if (!element) {\n      return;\n    }\n\n    if (typeof element !== 'object') {\n      throw new TypeError(\n        formElements[elementKey] + ' is missing an input or select.'\n      );\n    } else if (typeof labels !== 'object') {\n      throw new TypeError(formElements[elementKey] + ' is missing a label.');\n    }\n  });\n}\n\n/**\n * Given an countryCode (eg. 'CA'), will return the data of that country\n */\nfunction getCountry(countryCode, countries) {\n  countryCode = countryCode || 'CA';\n  return countries.filter(function(country) {\n    return country.code === countryCode;\n  })[0];\n}\n\n/**\n * Given a format (eg. \"{firstName}{lastName}_{company}_{address1}_{address2}_{city}_{country}{province}{zip}_{phone}\")\n * will return an array of how the form needs to be formatted, eg.:\n * =>\n * [\n *   ['firstName', 'lastName'],\n *   ['company'],\n *   ['address1'],\n *   ['address2'],\n *   ['city'],\n *   ['country', 'province', 'zip'],\n *   ['phone']\n * ]\n */\nfunction getOrderedField(format) {\n  return format.split(LINE_DELIMITER).map(function(fields) {\n    var result = fields.match(FIELD_REGEXP);\n    if (!result) {\n      return [];\n    }\n\n    return result.map(function(fieldName) {\n      var newFieldName = fieldName.replace(/[{}]/g, '');\n\n      switch (newFieldName) {\n        case 'zip':\n          return 'postalCode';\n        case 'province':\n          return 'zone';\n        default:\n          return newFieldName;\n      }\n    });\n  });\n}\n\n/**\n * Given a rootEl where all `input`s, `select`s, and `labels` are nested, it\n * will returns all form elements (wrapper, input and labels) of the form.\n * See `FormElements` type for details\n */\nfunction loadFormElements(rootEl, inputSelectors) {\n  var elements = {};\n  Object.keys(INPUT_SELECTORS).forEach(function(inputKey) {\n    var input = rootEl.querySelector(inputSelectors[inputKey]);\n    elements[inputKey] = input\n      ? {\n          wrapper: input.parentElement,\n          input: input,\n          labels: document.querySelectorAll('[for=\"' + input.id + '\"]'),\n        }\n      : {};\n  });\n\n  return elements;\n}\n\n/**\n * If shippingCountriesOnly is set to true, will return the list of countries the\n * shop ships to. Otherwise returns null.\n */\nfunction loadShippingCountries(shippingCountriesOnly) {\n  if (!shippingCountriesOnly) {\n    // eslint-disable-next-line no-undef\n    return Promise.resolve(null);\n  }\n\n  var response = fetch(location.origin + '/meta.json');\n\n  return response\n    .then(function(res) {\n      return res.json();\n    })\n    .then(function(meta) {\n      // If ships_to_countries has * in the list, it means the shop ships to\n      // all countries\n      return meta.ships_to_countries.indexOf('*') !== -1\n        ? null\n        : meta.ships_to_countries;\n    })\n    .catch(function() {\n      return null;\n    });\n}\n\n/**\n * Only returns countries that are in includedCountryCodes\n * Returns all countries if no includedCountryCodes is passed\n */\nfunction filterCountries(countries, includedCountryCodes) {\n  if (!includedCountryCodes) {\n    return countries;\n  }\n\n  return countries.filter(function(country) {\n    return includedCountryCodes.indexOf(country.code) !== -1;\n  });\n}\n","export function mergeObjects() {\n  var to = Object({});\n\n  for (var index = 0; index < arguments.length; index++) {\n    var nextSource = arguments[index];\n\n    if (nextSource) {\n      for (var nextKey in nextSource) {\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          to[nextKey] = nextSource[nextKey];\n        }\n      }\n    }\n  }\n  return to;\n}\n","import { component } from 'picoapp';\n// import jump from 'jump.js';\n// import { getClosest } from '../../utilities';\n// import { CountryProvinceSelector } from '@shopify/theme-addresses';\nimport { AddressForm } from '@shopify/theme-addresses';\nconst delegate = require('delegate');\nimport { getClosest } from '../../utilities';\n\nconst selectors = {\n  addressContainer: '[data-address]',\n  addressToggle: '[data-address-toggle]',\n  addressCountry: '[data-address-country]',\n  addressProvince: '[data-address-province]',\n  addressProvinceWrapper: '[data-address-province-wrapper]',\n  addressForm: '[data-address-form]',\n  addressDeleteForm: '[data-address-delete-form]',\n};\n\nconst hideClass = 'hide';\n\nclass Addresses {\n  constructor(el, ctx) {\n    this.el = el;\n    this.ctx = ctx;\n    this.init();\n    this.bindEvents();\n    this.addNewAddressForm = document.querySelector('[data-address-form]');\n  }\n\n  init(el) {\n    let addressFormContainers = document.querySelectorAll('[data-address-form');\n    addressFormContainers.forEach((form) => {\n      let wrapper = form.querySelector('.Form__grid');\n      let formPromise = AddressForm(wrapper, 'en', {\n        shippingCountriesOnly: true,\n      });\n    });\n    // checkUrlHash();\n    // resetPasswordSuccess();\n  }\n\n  bindEvents() {\n    // Toggle the Add New Address Form\n    delegate(\n      document.body,\n      '[data-new-address-toggle]',\n      'click',\n      (e) => {\n        this.addNewAddressForm.classList.toggle(hideClass);\n      },\n      false\n    );\n    delegate(\n      document.body,\n      '[data-address-toggle]',\n      'click',\n      (e) => {\n        let parent = getClosest(e.delegateTarget, '.Card');\n        let form = parent.querySelector('[data-address-form]');\n        form.classList.toggle(hideClass);\n      },\n      false\n    );\n  }\n\n  initializeAddressForm(countryProvinceSelector, container) {\n    const countrySelector = container.querySelector(selectors.addressCountry);\n    const provinceSelector = container.querySelector(selectors.addressProvince);\n    const provinceWrapper = container.querySelector(selectors.addressProvinceWrapper);\n    const addressForm = container.querySelector(selectors.addressForm);\n    const addNewAddressForm = container.querySelector('.add-new-address');\n    const deleteForm = container.querySelector(selectors.addressDeleteForm);\n\n    countryProvinceSelector.build(countrySelector, provinceSelector, {\n      onCountryChange: (provinces) => provinceWrapper.classList.toggle(hideClass, !provinces.length),\n    });\n\n    document.querySelector('.Page__banner [data-address-toggle]').addEventListener('click', () => {\n      addNewAddressForm.classList.toggle(hideClass);\n    });\n\n    container.querySelectorAll(selectors.addressToggle).forEach((button) => {\n      button.addEventListener('click', () => {\n        addressForm.classList.toggle(hideClass);\n      });\n    });\n\n    if (deleteForm) {\n      deleteForm.addEventListener('submit', (event) => {\n        const confirmMessage = deleteForm.getAttribute('data-confirm-message');\n\n        if (!window.confirm(confirmMessage || 'Are you sure you wish to delete this address?')) {\n          event.preventDefault();\n        }\n      });\n    }\n  }\n}\n\nexport default component((node, ctx) => {\n  new Addresses(node, ctx);\n});\n"],"sourceRoot":""}