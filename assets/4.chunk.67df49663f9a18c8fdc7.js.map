{"version":3,"sources":["webpack:///./src/js/components/ui/Accordion/index.js"],"names":["Accordion","el","ctx","this","identifier","dataset","init","bindEvents","items","querySelectorAll","forEach","element","classList","contains","console","log","content","querySelector","gsap","set","height","fromTo","opacity","duration","addEventListener","e","target","getClosest","preventDefault","toggleItem","window","onhashchange","handleHashUpdate","bind","to","remove","add","Array","prototype","slice","call","filter","item","isEqualNode","autoScroll","location","hash","newPanel","substring","jump","offset","a11y","component","node"],"mappings":"sLAKMA,G,kBACJ,WAAYC,EAAIC,GAAK,YACnBC,KAAKD,IAAMA,EACXC,KAAKC,WAAaH,EAAGI,QAAQD,WAC7BD,KAAKG,KAAKL,GACVE,KAAKI,a,yCAGFN,GACHE,KAAKF,GAAKA,EACVE,KAAKK,MAAQP,EAAGQ,iBAAiB,oBACjCN,KAAKK,MAAME,SAAQ,SAACC,GAClB,GAAIA,EAAQC,UAAUC,SAAS,aAAc,CAC3CC,QAAQC,IAAI,eACZ,IAAIC,EAAUf,EAAGgB,cAAc,uBAC/BC,IAAKC,IAAIH,EAAS,CAAEI,OAAQ,SAC5BF,IAAKG,OAAOL,EAAS,CAAEI,OAAQ,EAAGE,QAAS,GAAK,CAAEF,OAAQ,OAAQE,QAAS,EAAGC,SAAU,W,mCAMjF,WACXpB,KAAKK,MAAME,SAAQ,SAACC,GAClBA,EAAQa,iBAAiB,SAAS,SAACC,IAC7BA,EAAEC,OAAOd,UAAUC,SAAS,sBAAwBc,YAAWF,EAAEC,OAAQ,yBAC3ED,EAAEG,iBACF,EAAKC,WAAWlB,UAItBmB,OAAOC,aAAe5B,KAAK6B,iBAAiBC,KAAK9B,Q,iCAGxCF,GACT,IAAIe,EAAUf,EAAGgB,cAAc,uBAC3BhB,EAAGW,UAAUC,SAAS,cACxBK,IAAKgB,GAAGlB,EAAS,CAAEI,OAAQ,EAAGE,QAAS,EAAGC,SAAU,KACpDtB,EAAGW,UAAUuB,OAAO,eAEpBjB,IAAKC,IAAIH,EAAS,CAAEI,OAAQ,SAC5BF,IAAKG,OAAOL,EAAS,CAAEI,OAAQ,EAAGE,QAAS,GAAK,CAAEF,OAAQ,OAAQE,QAAS,EAAGC,SAAU,KACxFtB,EAAGW,UAAUwB,IAAI,cAEAC,MAAMC,UAAUC,MAAMC,KAAKrC,KAAKK,OAClBiC,QAAO,SAACC,GAAD,OAAWA,EAAKC,YAAY1C,MACtDS,SAAQ,SAACT,GACrBA,EAAGW,UAAUuB,OAAO,kB,uCAIPS,GACf,GAAKd,OAAOe,SAASC,KAArB,CAEA,IAAMC,EAAW5C,KAAKF,GAAGgB,cAAc,6BAA+Ba,OAAOe,SAASC,KAAKE,UAAU,GAAK,KAEtGD,IACF5C,KAAK0B,WAAWkB,GAEZH,GAGFK,KAAKF,EAAU,CACbxB,SAAU,IACV2B,QAAS,IACTC,MAAM,U,MAaDC,uBAAU,SAACC,EAAMnD,GAC9B,IAAIF,EAAUqD,EAAMnD","file":"4.chunk.67df49663f9a18c8fdc7.js","sourcesContent":["import { component } from 'picoapp';\nimport { gsap } from 'gsap';\nimport { getClosest } from 'Theme/js/utilities';\nimport './Accordion.scss';\n\nclass Accordion {\n  constructor(el, ctx) {\n    this.ctx = ctx;\n    this.identifier = el.dataset.identifier;\n    this.init(el);\n    this.bindEvents();\n  }\n\n  init(el) {\n    this.el = el;\n    this.items = el.querySelectorAll('.Accordion__item');\n    this.items.forEach((element) => {\n      if (element.classList.contains('is-active')) {\n        console.log('auto expand');\n        let content = el.querySelector('.Accordion__content');\n        gsap.set(content, { height: 'auto' });\n        gsap.fromTo(content, { height: 0, opacity: 0 }, { height: 'auto', opacity: 1, duration: 0.4 });\n      }\n    });\n    // this.handleHashUpdate(false);\n  }\n\n  bindEvents() {\n    this.items.forEach((element) => {\n      element.addEventListener('click', (e) => {\n        if (e.target.classList.contains('Accordion__toggle') || getClosest(e.target, '.Accordion__toggle')) {\n          e.preventDefault();\n          this.toggleItem(element);\n        }\n      });\n    });\n    window.onhashchange = this.handleHashUpdate.bind(this);\n  }\n\n  toggleItem(el) {\n    let content = el.querySelector('.Accordion__content');\n    if (el.classList.contains('is-active')) {\n      gsap.to(content, { height: 0, opacity: 0, duration: 0.4 });\n      el.classList.remove('is-active');\n    } else {\n      gsap.set(content, { height: 'auto' });\n      gsap.fromTo(content, { height: 0, opacity: 0 }, { height: 'auto', opacity: 1, duration: 0.4 });\n      el.classList.add('is-active');\n    }\n    var optionsArray = Array.prototype.slice.call(this.items);\n    var filteredArray = optionsArray.filter((item) => !item.isEqualNode(el));\n    filteredArray.forEach((el) => {\n      el.classList.remove('is-active');\n    });\n  }\n\n  handleHashUpdate(autoScroll) {\n    if (!window.location.hash) return; // Account for calls without an actual hash change\n\n    const newPanel = this.el.querySelector(':scope > [data-identifier=' + window.location.hash.substring(1) + ']');\n\n    if (newPanel) {\n      this.toggleItem(newPanel);\n\n      if (autoScroll) {\n        // Scroll tabs into view\n        // const panelPos = newPanel.offsetTop - 140;\n        jump(newPanel, {\n          duration: 600,\n          offset: -100,\n          a11y: false,\n        });\n        // setTimeout(() => {\n        //   window.scrollTo({\n        //     top: panelPos,\n        //     behavior: 'smooth' // Optional, adds animation\n        //   });\n        // }, 200);\n      }\n    }\n  }\n}\n\nexport default component((node, ctx) => {\n  new Accordion(node, ctx);\n});\n"],"sourceRoot":""}